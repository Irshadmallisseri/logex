Here's the **updated final note** with all the changes made so far.

---

# **Final Notes: FastAPI Logging with Elasticsearch and Kibana**

This document consolidates all the steps performed to set up logging in FastAPI and store logs in Elasticsearch, along with visualizing them in Kibana.

---

## **1. Setup Elasticsearch, Kibana, and APM Server using Docker**
We used **Docker Compose** to set up an **Elasticsearch cluster**, Kibana, and APM Server.

### **docker-compose.yml**
```yaml
version: '3.8'

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - ELASTIC_PASSWORD=changeme
    ports:
      - "9200:9200"
    networks:
      - elastic

  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=changeme
    ports:
      - "5601:5601"
    networks:
      - elastic
    depends_on:
      - elasticsearch

  apm-server:
    image: docker.elastic.co/apm/apm-server:8.9.0
    container_name: apm-server
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=changeme
    ports:
      - "8200:8200"
    networks:
      - elastic
    depends_on:
      - elasticsearch

networks:
  elastic:
    driver: bridge
```
---

## **2. Start the Services**
We started the services using:
```sh
docker-compose up -d
```
To verify if containers are running:
```sh
docker ps
```
If Elasticsearch status is stuck at **(health: starting)**, restart it:
```sh
docker restart elasticsearch
```

---

## **3. Install Dependencies for FastAPI**
We set up a FastAPI application and installed necessary dependencies:
```sh
pip install fastapi uvicorn elasticsearch
```

---

## **4. Implement Logging in FastAPI**
We created a `main.py` to send logs to Elasticsearch:

### **main.py**
```python
import logging
from fastapi import FastAPI
from elasticsearch import Elasticsearch
from datetime import datetime

app = FastAPI()

# Connect to Elasticsearch
es = Elasticsearch("http://localhost:9200")

# Configure logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

@app.get("/log")
async def log_message():
    log_entry = {
        "timestamp": datetime.utcnow().isoformat(),
        "message": "This is a test log from FastAPI"
    }
    es.index(index="fastapi-logs", document=log_entry)  # Updated for Elasticsearch 8.x
    logger.info("Logged a message to Elasticsearch")
    return {"message": "Check your logs for the logged message!"}
```
### **Key Updates in Code:**
âœ… **Fixed Elasticsearch 8.x syntax:** `es.index()` now uses `document=log_entry` instead of `body=log_entry`.
âœ… **Improved logging format:** Logs are now structured with timestamps and log levels.

---

## **5. Run FastAPI Application**
We started the FastAPI app using:
```sh
uvicorn main:app --host 0.0.0.0 --port 8000 --reload
```

---

## **6. Generate Logs by Making API Requests**
We triggered logs by making GET requests:
```sh
curl -X GET "http://localhost:8000/log"
```
Expected Response:
```json
{"message":"Check your logs for the logged message!"}
```

---

## **7. Verify Logs in Elasticsearch**
We checked if logs were stored in Elasticsearch:
```sh
curl -X GET "http://localhost:9200/fastapi-logs/_search?pretty"
```
Sample Response:
```json
{
  "hits": {
    "total": { "value": 3, "relation": "eq" },
    "hits": [
      {
        "_source": {
          "timestamp": "2025-02-16T18:39:06.706616",
          "message": "This is a test log from FastAPI"
        }
      }
    ]
  }
}
```
If no logs are found, restart **Elasticsearch** and try logging again.

---

## **8. Visualizing Logs in Kibana**
### **Step 1: Open Kibana**
- Open **`http://localhost:5601`** in a browser.

### **Step 2: Create an Index Pattern**
1. Navigate to **"Stack Management" > "Index Patterns"**.
2. Click **"Create Index Pattern"**.
3. Enter **`fastapi-logs`** as the index pattern name.
4. Select **`timestamp`** as the time filter field.
5. Click **"Create index pattern"**.

### **Step 3: View Logs in Discover**
1. Go to **"Discover"** in Kibana.
2. Select **`fastapi-logs`** from the dropdown.
3. You should now see the logs.

---

## **9. Next Steps**
Now that basic logging is set up, here are some possible improvements:
âœ… Add structured logs with log levels (INFO, DEBUG, ERROR).
âœ… Use Filebeat or Logstash for better log ingestion.
âœ… Configure alerts in Kibana for critical log events.
âœ… Integrate Elastic APM for performance monitoring.

Let me know if you need any modifications! ðŸš€